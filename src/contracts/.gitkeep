// SPDX-License-Identifier: MIT
pragma solidity ^0.5.16;

contract PatientRegistration {
    struct mhtChildhoodDetails {
        string questionOne;
        string questionTwo;
        string questionThree;
        string questionFour;
        string questionFive;
    }

    struct mhtphq9Section {
        string questionOne;
        string questionTwo;
        string questionThree;
        string questionFour;
        string questionFive;
        string questionSix;
        string questionSeven;
        string questionEight;
        string questionNine;
    }

    struct PatientMHTest {
        string testID;
        mhtChildhoodDetails mhtcd;
        mhtphq9Section mhtphq;
    }

    struct Patient {
        PatientMHTest[] mentalHealthTests;
    }

    mapping(string => bool) public isPatientRegistered;
    mapping(string => Patient) private patients;

    event MentalHealthTestAdded(string healthID, string testID);

    function addChildhoodDetails(
        string memory _healthID,
        string memory _testID,
        string memory _questionOne,
        string memory _questionTwo,
        string memory _questionThree,
        string memory _questionFour,
        string memory _questionFive
    ) public {
        require(isPatientRegistered[_healthID], "Patient not registered");

        PatientMHTest memory newTest;
        newTest.testID = _testID;
        newTest.mhtcd = mhtChildhoodDetails({
            questionOne: _questionOne,
            questionTwo: _questionTwo,
            questionThree: _questionThree,
            questionFour: _questionFour,
            questionFive: _questionFive
        });

        patients[_healthID].mentalHealthTests.push(newTest);
    }

    function addPHQ9Section(
        string memory _healthID,
        string memory _testID,
        string memory _questionOne,
        string memory _questionTwo,
        string memory _questionThree,
        string memory _questionFour,
        string memory _questionFive,
        string memory _questionSix,
        string memory _questionSeven,
        string memory _questionEight,
        string memory _questionNine
    ) public {
        require(isPatientRegistered[_healthID], "Patient not registered");

        uint256 testIndex = findTestIndex(_healthID, _testID);
        patients[_healthID].mentalHealthTests[testIndex].mhtphq = mhtphq9Section({
            questionOne: _questionOne,
            questionTwo: _questionTwo,
            questionThree: _questionThree,
            questionFour: _questionFour,
            questionFive: _questionFive,
            questionSix: _questionSix,
            questionSeven: _questionSeven,
            questionEight: _questionEight,
            questionNine: _questionNine
        });

        emit MentalHealthTestAdded(_healthID, _testID);
    }

    function findTestIndex(string memory _healthID, string memory _testID)
        internal
        view
        returns (uint256)
    {
        PatientMHTest[] storage tests = patients[_healthID].mentalHealthTests;
        for (uint256 i = 0; i < tests.length; i++) {
            if (keccak256(abi.encodePacked(tests[i].testID)) == keccak256(abi.encodePacked(_testID))) {
                return i;
            }
        }
        revert("Test ID not found");
    }
}